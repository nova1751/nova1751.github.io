'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _webpack = require('webpack');

var _webpack2 = _interopRequireDefault(_webpack);

var _htmlWebpackPlugin = require('html-webpack-plugin');

var _htmlWebpackPlugin2 = _interopRequireDefault(_htmlWebpackPlugin);

var _globby = require('globby');

var _globby2 = _interopRequireDefault(_globby);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _webpackMerge = require('webpack-merge');

var _webpackMerge2 = _interopRequireDefault(_webpackMerge);

var _installedByYarnGlobally = require('installed-by-yarn-globally');

var _installedByYarnGlobally2 = _interopRequireDefault(_installedByYarnGlobally);

var _server = require('./server');

var _server2 = _interopRequireDefault(_server);

var _mikuError = require('./miku-error');

var _mikuError2 = _interopRequireDefault(_mikuError);

var _utils = require('./utils');

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (() => {
  var _ref = _asyncToGenerator(function* (input, flags) {
    input = yield (0, _globby2.default)(['!**/node_modules/**', ...input]);

    const localConfig = (0, _utils.readConfig)();
    const localWebpackConfig = (0, _utils.readWebpackConfig)();

    const options = Object.assign({
      input,
      port: 3001
    }, localConfig, flags);

    if (input.length === 0) {
      throw new _mikuError2.default('no detected file...');
    }

    console.log(`\n  > Detected files:`);
    input.forEach(function (name) {
      console.log(`  ${ _chalk2.default.green(`+ ${ name }`) }`);
    });
    console.log();

    const html = input.filter(function (name) {
      return name.endsWith('.html');
    })[0];

    const babelOptions = (0, _utils.hasBabelrc)() ? {} : {
      presets: [[require.resolve('babel-preset-es2015'), { modules: false }], require.resolve('babel-preset-stage-2')],
      plugins: [require.resolve('babel-plugin-transform-runtime'), [require.resolve('babel-plugin-transform-react-jsx'), { pragma: options.pragma }]]
    };

    const webpackConfig = {
      entry: {
        client: input.filter(function (name) {
          return !name.endsWith('.html');
        })
      },
      devtool: 'eval-source-map',
      performance: {
        hints: false
      },
      output: {
        path: (0, _utils.cwd)('.miku/dist'),
        filename: '[name].js',
        publicPath: '/'
      },
      resolve: {
        extensions: ['.js', '.css', '.vue', '.jsx'],
        modules: [(0, _utils.cwd)(), (0, _utils.cwd)('node_modules'), (0, _utils.ownDir)('node_modules')]
      },
      resolveLoader: {
        modules: [(0, _utils.ownDir)('node_modules'), (0, _utils.cwd)('node_modules')]
      },
      module: {
        rules: [{
          test: /\.jsx?$/,
          loader: 'babel-loader',
          exclude: [/node_modules/]
        }, {
          test: /\.css$/,
          loaders: ['style-loader', 'css-loader', 'postcss-loader']
        }, {
          test: /\.(sass|scss)$/,
          loaders: ['style-loader', 'css-loader', 'sass-loader']
        }, {
          test: /\.styl$/,
          loaders: ['style-loader', 'css-loader', 'stylus-loader']
        }, {
          test: /\.less$/,
          loaders: ['style-loader', 'css-loader', 'less-loader']
        }, {
          test: /\.ts$/,
          loader: 'ts-loader'
        }, {
          test: /\.coffee$/,
          loader: 'coffee-loader'
        }, {
          test: /\.(svelte|sve)$/,
          loader: 'svelte-loader'
        }, {
          test: /\.ls$/,
          loader: 'livescript-loader'
        }, {
          test: /\.(pug|jade)$/,
          loader: 'pug-loader'
        }, {
          test: /\.vue$/,
          loader: 'vue-loader',
          options: {
            postcss: [require('cssbag')()],
            pug: 'pug-loader',
            jade: 'pug-loader',
            js: 'babel-loader',
            sass: 'sass-loder?indentedSyntax',
            scss: 'scss-loader',
            stylus: 'stylus-loader',
            less: 'less-loader',
            ts: 'ts-loader',
            coffee: 'coffee-loader',
            live: 'livescript-loader'
          }
        }, {
          test: /\.(ico|jpg|png|gif|eot|otf|webp|ttf|woff|woff2)(\?.*)?$/,
          loader: 'file-loader',
          options: {
            name: 'static/media/[name].[hash:8].[ext]'
          }
        }, {
          test: /\.svg$/,
          loader: 'raw-loader'
        }]
      },
      plugins: [new _htmlWebpackPlugin2.default({
        template: html || (0, _utils.ownDir)('static/index.html')
      }), new _webpack2.default.HotModuleReplacementPlugin(), new _webpack2.default.LoaderOptionsPlugin({
        options: {
          postcss: [require('cssbag')()],
          babel: babelOptions
        }
      })]
    };

    if ((0, _installedByYarnGlobally2.default)(__dirname)) {
      webpackConfig.resolve.modules.push((0, _utils.ownDir)('../'));
      webpackConfig.resolveLoader.modules.push((0, _utils.ownDir)('../'));
    }

    if (options.production) {
      const ProgressPlugin = require('webpack/lib/ProgressPlugin');

      webpackConfig.plugins.push(new ProgressPlugin(), new _webpack2.default.DefinePlugin({
        'process.env.NODE_ENV': JSON.stringify('production')
      }), new _webpack2.default.LoaderOptionsPlugin({
        minimize: true
      }), new _webpack2.default.optimize.UglifyJsPlugin({
        sourceMap: false,
        compressor: {
          warnings: false
        },
        output: {
          comments: false
        }
      }));
    } else {
      const FriendlyErrors = require('friendly-errors-webpack-plugin');
      const PostCompile = require('post-compile-webpack-plugin');

      webpackConfig.entry.client.push(require.resolve('webpack-hot-middleware/client') + '?reload=true');
      webpackConfig.plugins.push(new FriendlyErrors(), new PostCompile(function () {
        console.log(`> Open ${ _chalk2.default.yellow(`http://localhost:${ options.port }`) }\n`);
      }));
    }

    const finalWebpackConfig = (0, _webpackMerge2.default)(webpackConfig, localWebpackConfig);

    if (options.production) {
      (0, _webpack2.default)(finalWebpackConfig, function (err, stats) {
        if (err) {
          return console.log(err.message);
        }
        if (stats.hasErrors() || stats.hasWarnings()) {
          return console.log(stats.toString('errors-only'));
        }
        console.log(stats.toString({
          chunks: false,
          children: false,
          modules: false,
          colors: true
        }));
      });
    } else {
      try {
        const app = (0, _server2.default)(finalWebpackConfig, options);
        app.listen(options.port);
      } catch (err) {
        console.log(err.message);
        process.exit(1);
      }
    }
  });

  function main(_x, _x2) {
    return _ref.apply(this, arguments);
  }

  return main;
})();