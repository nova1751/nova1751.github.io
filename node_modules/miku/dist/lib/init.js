'use strict';

Object.defineProperty(exports, "__esModule", {
  value: true
});

var _fs = require('fs');

var _fs2 = _interopRequireDefault(_fs);

var _gracefulCopy = require('graceful-copy');

var _gracefulCopy2 = _interopRequireDefault(_gracefulCopy);

var _chalk = require('chalk');

var _chalk2 = _interopRequireDefault(_chalk);

var _utils = require('./utils');

var _mikuError = require('./miku-error');

var _mikuError2 = _interopRequireDefault(_mikuError);

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

exports.default = (() => {
  var _ref = _asyncToGenerator(function* (folder, options) {
    if (!folder) {
      throw new _mikuError2.default('Please specific a folder');
    }

    if (!options.force && _fs2.default.existsSync(folder)) {
      throw new _mikuError2.default(`${ folder } already exists, use --force to overwrite`);
    }
    yield (0, _gracefulCopy2.default)((0, _utils.ownDir)('static/template'), (0, _utils.cwd)(folder), {
      data: {
        name: folder
      }
    });
    console.log(_chalk2.default.green('\n  Successfully generated a new project!\n'));
    console.log(`  cd ${ folder } && yarn && yarn try\n`);
  });

  function init(_x, _x2) {
    return _ref.apply(this, arguments);
  }

  return init;
})();